#!/bin/bash
shopt -s extglob

gap=2  ## internal parameter
cov=30  ## internal parameter
chunk=1995M ## internal parameter
anchor_mapq=28
clip=20
outprefix=project
enzyme=""
workdir=$(pwd)
genome=""
remap=F
index=""
repbase=""
bgAnnotations=""
indexP=""
help=0
printHelpAndExit() {
    echo ""
    echo ""
    echo "Usage: ${0##*/} [-w workdir] [-e enzyme] [-q anchor_mapq] [-o outprefix] [-s clip] [-g genome] [-r remap] [-n index] [-b repbase] [-p indexP] [-a anno] [-h help] -i inputs (space separated psam/bam in inverted commas)"
    echo ""
    echo "Required****"
    echo "    -i inputs :          Input file in pairsam format or unsorted-lossless bam format"
    echo "    -e enzyme :          Restriction endunuclease used for the assay (default: '', available:MboI,DpnII,HindIII,Arima,NcoI,NotI)"
    echo "    -g genome :          Genome build to be used (default:hg38, available: hg19)"
    echo ""
    echo "Optional"
    echo "  (following 4 parameters are optional if -g is specified)"
    echo "    -n index :           fasta format file for TE-consensus sequences"
    echo "    -b repbase :         fasta format file for Repbase subfamily sequences"
    echo "    -p indexP :          fasta format file for Polymorphic sequences (header should be Family~name format) (optional)"
    echo "    -a anno :            reference-genome copies for TE-family members"
    echo ""
    echo "    -o outprefix :       Output prefix while generating report files (default: project)"
    echo "    -w workdir:          Working directory where the files are to be written"
    echo "    -q anchor_mapq :     Mapping quality threshold for repeat anchored mate on the reference genome (default: 28)"
    echo "    -s clip :            Minimum clip length for detecting insertion (should be >=13bp) (default: 20) "
    echo "    -r remap :           whether to remap unmapped clipped reads to the polymoprhic sequences (default:F, if T, -p needs to be specified)"
    echo "    -h help :            Display help message"
    echo ""
    echo ""
    exit "$1"
}
while getopts "i:o:e:w:q:s:g:r:x:n:b:p:a:h" opt; do
    case $opt in
        i) inputs=$OPTARG;;
        o) outprefix=$OPTARG;;
        e) enzyme=$OPTARG;;
        w) workdir=$OPTARG;;
        q) anchor_mapq=$OPTARG;;
        s) clip=$OPTARG;;
        g) genome=$OPTARG;;
        r) remap=$OPTARG;;
        x) wgs=$OPTARG;;
        n) index=$OPTARG;;
        b) repbase=$OPTARG;;
        p) indexP=$OPTARG;;
        a) bgAnnotations=$OPTARG;;
        h) printHelpAndExit 0;;
        [?]) printHelpAndExit 0;;
        esac
done
if [[ -z $inputs ]];then
    echo "****No input provided"
    printHelpAndExit 0
fi
if [[ -z $enzyme ]];then
    echo "****No restriction endunuclease motif provided"
    printHelpAndExit 0
fi
if [[ -z $genome && -z $index && -z $bgAnnotations && -z $repbase ]]; then
  echo "******genome is not specified and the index file for TE-consensus sequences is not provided"
    printHelpAndExit 0
fi

if [[ $genome == "hg38" ]]; then
    index=hg38/TEConsensus_Hs.fa
    repbase=hg38/Repbase_Hs.fa
    bgAnnotations=hg38/bgRepeats_hg38.bed.gz
    indexP=hg38/Polymorphs_Hs.fa
elif [[ $genome == "hg19" ]]; then
    index=hg19/TEConsensus_Hs.fa
    repbase=hg19/Repbase_Hs.fa
    bgAnnotations=hg19/bgRepeats_hg38.bed.gz
    indexP=hg19/Polymorphs_Hs.fa
fi

  #statements
STARTSEC=$(date +%s)
MYSEC=$(date +%s)
DIFFSEC=`expr ${MYSEC} - ${STARTSEC}`
workdir=$(echo "$workdir" | sed -e 's/\/$//g')
ncores=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || echo "$NUMBER_OF_PROCESSORS")
threads=$(lscpu | sed -n 's/^Core(s) per socket: *//p')
tot_threads=$(($ncores * $threads))
paramlog=${workdir}/${outprefix}.param.log
echo "" > $paramlog
if ! [[ -e $paramlog ]]; then
  echo "No prameter file was printed"
  exit 1
fi
readlength=`samtools view $inputs[0] | head -n 100 | cut -f10 | awk '{ sum += length($0)} END { if (NR > 0) print sum / NR; }'`

echo ""
echo ""
echo "I/O and paramters:"  | tee -a $paramlog 
echo " -i                   --inputs            $inputs" | tee -a $paramlog 
echo " -o                   --outprefix         $outprefix" | tee -a $paramlog 
echo " -w                   --workdir           $workdir" | tee -a $paramlog 
echo " -m                   --enzyme            $enzyme" | tee -a $paramlog 
echo " -index               --index             $index" | tee -a $paramlog 
echo " -repbase             --repbase           $repbase " | tee -a $paramlog 
echo " -remap               --remap             $remap " | tee -a $paramlog 
echo " -bgAnnotations       --bgAnnotations     $bgAnnotations" | tee -a $paramlog 
echo " -chr_sizes           --chrsize           $chrsize" | tee -a $paramlog 
echo " -anchor_mapq         --anchor_mapq       $anchor_mapq" | tee -a $paramlog 
echo " -clip                --clip              $clip" | tee -a $paramlog 
echo " -gap                 gap                 $gap" | tee -a $paramlog 
echo " -read-length         inferred-readlength $readlength" | tee -a $paramlog 
echo " -chunksize           chunk size          $chunk" | tee -a $paramlog 
echo " -ncores (available)  --ncores            $ncores" | tee -a $paramlog 
if [[ "$ncores" -gt 32 ]]; then
    ncores=32
fi
echo " -ncores (used)       $ncores" | tee -a $paramlog 
echo " -threads (available) $tot_threads" | tee -a $paramlog 
if [[ "$tot_threads" -gt 8 ]]; then
    tot_threads=8
fi
echo " -threads (used)      $tot_threads" | tee -a $paramlog 
echo "" | tee -a $paramlogecho "command: hitea -p $ncores -m $enzyme -q $anchor_mapq -o $outprefix -s $clip -g $genome -w $workdir -i $inputs"  | tee -a $paramlog 
echo "" | tee -a $paramlog 
echo "" | tee -a $paramlog  

echo  Start-Time `date +%H:%M:%S -ud @${DIFFSEC}` | tee -a $paramlog 
echo ""
echo ""
echo ""

#awk '/^>/{if (l!="") print l; print; l=0; next}{l+=length($0)}END{print l}'  $index
##################################################################################################333
echo "# Step1 : checking dependancies ... " | tee -a $paramlog 
if ! [[ -x $(command -v bwa mem) ]]; then
    echo 'bwa suit not found. make sure to set the path variable right and try again. exiting! ' >&2
    exit 1
fi
if ! [[ -x $(command -v pairsamtools parse --help) ]]; then
    echo 'pairsamtools suite is not installed. make sure to set the path variable right and try again. exiting! ' >&2   
    exit 1
fi
if ! [[ -x $(command -v bedtools) ]]; then
    echo 'bedtools not found. make sure to set the path variable right and try again. exiting! ' >&2
    exit 1
fi
if ! [[ -x $(command -v samtools) ]]; then
  echo 'samtools not found. make sure to set the path variable right and try again. exiting! ' >&2
  exit 1
fi
if ! [[ -x $(command -v parallel -h) ]]; then
    echo 'gnu parallel not found. make sure to set the path variable right and try again. exiting! ' >&2   
    exit 1
fi
echo "great!! all dependancies are present!" | tee -a $paramlog 
echo "" | tee -a $paramlog 

tempdir=$workdir/tmp
mkdir -p $tempdir
mkdir -p $workdir/indexC
mkdir -p $workdir/indexP
mkdir -p $workdir/repbase
mkdir -p $workdir/bgAnnotations

echo "running pre-run checks.." | tee -a $paramlog 
echo ""
echo "  1. retrieving header and chr_sizes information" | tee -a $paramlog 
if [[ ${inputs[0]} == *.bam ]]; then
  samtools view -H ${inputs[0]} > $workdir/headers.sam
  echo -e "@PG\tID:hitea\tPN:hitea\tCL:hitea -w $workdir -p $ncores -m $enzyme -q $anchor_mapq -o $outprefix -s $clip -g $genome -i $inputs" >> $workdir/headers.sam
else
  echo " can't extract headers. Exiting !"
  exit 1
fi
chrsize=$workdir/chr_sizes.txt
samtools view -H ${inputs[0]} | awk '$1 ~ /SQ/ {print $2"\t"$3}' - > $chrsize
sed -i 's/SN://g' $chrsize
sed -i 's/LN://g' $chrsize
echo ""
echo "  2. creating background annotation files using the input file.." | tee -a $paramlog 
if (file $bgAnnotations | grep -q compressed ) ; then
  zcat $bgAnnotations | sed -e "s/\r//g" -  | sort -k1,1 -k2,2n - | awk '{print>"'$workdir'/bgAnnotations/"$7".bed"}' - 
else
  cat $bgAnnotations | sed -e "s/\r//g" -  | sort -k1,1 -k2,2n - | awk '{print>"'$workdir'/bgAnnotations/"$7".bed"}' -  
fi
bgAnnotations=$workdir/bgAnnotations
echo ""
echo "  3. confirming TE family and subfamily names.." | tee -a $paramlog 
echo "perl src/prechecks.pl -index $index -polym $indexP -repbase $repbase -bgAnnotations $bgAnnotations -enzyme $enzyme"
perl src/prechecks.pl -index $index -polym $indexP -repbase $repbase -bgAnnotations $bgAnnotations -enzyme $enzyme
if [[ $? != 0  ]]; then
   echo "  ->Something went wrong during precheck step! " | tee -a $paramlog 
   exit 1
fi
echo ""
echo "  4. genrating index for TE-consensus.." | tee -a $paramlog 
cp $index $workdir/indexC/TEConsenssus.fa
bwa index $workdir/indexC/TEConsenssus.fa
index=$workdir/indexC/TEConsenssus.fa
echo ""
echo "  5. genrating index for Repbase sequences.." | tee -a $paramlog 
cp $repbase $workdir/repbase/repbase.fa
bwa index $workdir/repbase/repbase.fa
repbase=$workdir/repbase/repbase.fa
echo ""
if [[ ! -z $indexP ]]; then
 echo "  6. genrating index for Polymorphic sequences.." | tee -a $paramlog 
 cp $indexP $workdir/indexP/Polymorph.fa
 bwa index $workdir/indexP/Polymorph.fa
 indexP=$workdir/indexP/Polymorph.fa
fi
echo ""
echo "pre-run checks completed successfully." | tee -a $paramlog 
echo "" | tee -a $paramlog 

##################################################################################################333
echo ""
echo "# Step2 : Splitting input file and generating fastq records ... " | tee -a $paramlog 
if ! [[ -e $workdir/${outprefix}_1.fq.gz ]];then
    for input in $inputs; do
      xbase=${input##*/}
      xbase=${xbase%.*}
      size=$(($(wc -c < "$input") +0))
      size=$((size /1000000000))
      if [[ $input == *.bam ]]; then
        echo "working on bam input ($xbase, size: $size Gb)" 
        if samtools view $input | head| grep -Fq "Yt:Z:"; then
         echo "File contains read-type classification"
         samtools view -@ $ncores $input | time parallel --resume-failed --memfree 1G --joblog $workdir/${xbase}_temp.parseGNU.log --tmpdir $tempdir --pipe --block $chunk perl src/parse.pl -bam - -outprefix "$xbase"_part_{#} -wd "$workdir" -clip "$clip" -e "$enzyme" -q "$anchor_mapq"
        else
         echo "File doesnot contain read-type classification. Employing pairtools"
         samtools view -@ 8 $input| pairsamtools parse -c $chrsize $input | pairsamtools split --output-sam - | time parallel --resume-failed --memfree 1G --joblog $workdir/${xbase}_temp.parseGNU.log --tmpdir $tempdir --pipe --block $chunk perl src/parse.pl -bam - -outprefix "$xbase"_part_{#} -wd "$workdir" -clip "$clip" -e "$enzyme"  -q "$anchor_mapq" 
        fi
      else
         echo " can't work with provided input file ${inputs[0]}. Exiting! "
         exit 1
      fi
    done
    if [[ $? != 0  ]]; then
      echo "Something went wrong while parsing the input file/s. Exiting! " | tee -a $paramlog 
    fi
else
    echo "$workdir/$outprefix_1.fq.gz is already created" 
fi


echo "Completed parsing input file" | tee -a $paramlog 
MYSEC=$(date +%s)
DIFFSEC=`expr ${MYSEC} - ${STARTSEC}`
echo Time-elapsed `date +%H:%M:%S -ud @${DIFFSEC}` | tee -a $paramlog 
if ! [[ -e $workdir/${outprefix}_1.fq.gz ]]; then    
    cat $workdir/*temp.fq.gz >> $workdir/${outprefix}_1.fq.gz
    cat $workdir/*temp2.fq.gz >> $workdir/${outprefix}_2.fq.gz
    size=$(($(wc -c < "$workdir/${outprefix}_1.fq.gz") +0))
    ## 1.
    if [[ $size < 10 ]]; then
      echo "ERROR : Fastq files are either not written/merged properly"
      exit 1
    fi
    rm $workdir/*temp.fq.gz
    rm $workdir/*temp2.fq.gz
    ## 2.
    if ! [[ -e $workdir/${outprefix}.ReadSummary.logs ]]; then
      perl src/summary.pl -outprefix $outprefix -wd $workdir
      size=$(($(wc -c < "$workdir/${outprefix}.ReadSummary.logs") +0))
      if [[ $size > 0 ]]; then
        rm $workdir/*_part*.summary.log.ph
      fi
    else
      echo "{outprefix}.ReadSummary.logs file present"
    fi
    ## 3.
    if ! [[ -e $workdir/${outprefix}.parseGNU.log ]]; then
      cat $workdir/*_temp.parseGNU.log > $workdir/${outprefix}.parseGNU.log
      size=$(($(wc -c < "$workdir/${outprefix}.parseGNU.log") +0))
      if [[ $size > 0 ]]; then
        rm $workdir/*_temp.parseGNU.log
      fi
    else
      echo "{outprefix}.parseGNU.log file present"
    fi
else
   echo "Split parts of $input are already merged"
fi
echo "Completed merging back the input parts" | tee -a $paramlog 
MYSEC=$(date +%s)
DIFFSEC=`expr ${MYSEC} - ${STARTSEC}`
echo Time-elapsed `date +%H:%M:%S -ud @${DIFFSEC}` | tee -a $paramlog 

##################################################################################################333
echo ""
echo "" | tee -a $paramlog 
echo "# Step3 : Extracting clusters  ... " | tee -a $paramlog 
echo " Mapping merged fastq file and extracting clusters"
if ! [[ -e $workdir/${outprefix}.RAM.sort.bam ]]; then
    echo ""
    echo " bwa mem -t $tot_threads -a -v 1 -k 13 -T $clip $index $workdir/${outprefix}_1.fq.gz | perl src/find_breaks.pl -bam - -outprefix ${outprefix}_1 -wd $workdir -hd $workdir/headers.sam -remap $remap -te 1"
    bwa mem -t $tot_threads -a -v 1 -k 13 -T $clip $index $workdir/${outprefix}_1.fq.gz | perl src/find_breaks.pl -bam - -outprefix ${outprefix}_1 -wd $workdir -hd $workdir/headers.sam -remap $remap -te 1
    if [[ $remap=="T" ]]; then
       echo ""
       echo " bwa mem -t $tot_threads -a -v 1 -k 13 -T $clip $indexP $workdir/${outprefix}_1.1.temp.remap.fq.gz | perl src/find_breaks.pl -bam - -outprefix ${outprefix}_1 -wd $workdir -hd $workdir/headers.sam -remap F -te 2"
       bwa mem -t $tot_threads -a -v 1 -k 13 -T $clip $indexP $workdir/${outprefix}_1.1.temp.remap.fq.gz | perl src/find_breaks.pl -bam - -outprefix ${outprefix}_1 -wd $workdir -hd $workdir/headers.sam -remap "F" -te 2
       rm $workdir/*.temp.remap.fq.gz
    fi    
    echo ""
    echo "bwa mem -t $tot_threads -a -v 1 -k 19 -T 30 $index $workdir/${outprefix}_2.fq.gz | perl src/find_breaks.pl -bam - -outprefix ${outprefix}_2 -wd $workdir -hd $workdir/headers.sam"
    bwa mem -t $tot_threads -a -v 1 -k 19 -T 30 $index $workdir/${outprefix}_2.fq.gz | perl src/find_breaks.pl -bam - -outprefix ${outprefix}_2 -wd $workdir -hd $workdir/headers.sam     
    if [[ $? != 0  ]]; then
      echo "Error in cluster extraction step " | tee -a $paramlog 
      exit 1
    fi
else
    echo "$workdir/$outprefix.RAM.bed.gz is already created"
fi
echo "Completed extracting cluster locations" | tee -a $paramlog 
MYSEC=$(date +%s)
DIFFSEC=`expr ${MYSEC} - ${STARTSEC}`
echo Time-elapsed `date +%H:%M:%S -ud @${DIFFSEC}` | tee -a $paramlog 

##################################################################################################333
echo ""
echo "" | tee -a $paramlog 
echo "# Step4 : Sorting/merging and cleaning up ..." | tee -a $paramlog 
if ! [[ -e $workdir/${outprefix}.RAM.sort.bam ]]; then
    samtools merge -@ 4 -uf ${workdir}/${outprefix}.RAM.bam $workdir/*.temp.RAM.bam
    size=$(($(wc -c < "$workdir/$outprefix.RAM.bam") +0))
    if [[ $size < 100 ]]; then
      echo "ERROR : RAM bed files are either not written/merged properly" | tee -a $paramlog 
      exit 1
    fi
    samtools sort -@ $tot_threads -m 1G -o $workdir/${outprefix}.RAM.sort.bam $workdir/${outprefix}.RAM.bam
    samtools index $workdir/${outprefix}.RAM.sort.bam
    size=$(($(wc -c < "$workdir/${outprefix}.RAM.sort.bam") +0))
    if [[ $size < 100 ]]; then
      echo "ERROR : bam file wasn't sorted properly" | tee -a $paramlog 
      exit 1
    fi    
    if [[ $? != 0  ]]; then
      echo "Error in sorting/mergin step " | tee -a $paramlog 
      exit 1
    fi
    rm $workdir/*temp.RAM.bam
    rm $workdir/${outprefix}.RAM.bam
else
    echo "Split RAM files corresponding to $input are already merged"
fi

if ! [[ -e $workdir/${outprefix}.sort.merge.clust.bed.gz ]]; then
    ls $workdir/*temp.clusters.bed | parallel -eta --verbose cat {} >> $workdir/${outprefix}.clusters.bed
    sort -k1,1 -k2,2n --parallel=$ncores -T $tempdir -s -S 4G $workdir/${outprefix}.clusters.bed > $workdir/${outprefix}.sort.clusters.bed
    bedtools merge -iobuf 100M -d $gap -s -c 7 -o collapse -i $workdir/${outprefix}.sort.clusters.bed | gzip -c - > $workdir/${outprefix}.sort.merge.clust.bed.gz
    size=$(($(wc -c < "$workdir/${outprefix}.clusters.bed") +0))
    if [[ $size < 100 ]]; then
      echo "ERROR : Clusters bed files are either not written/merged properly" | tee -a $paramlog 
      exit 1
    fi
    rm $workdir/*temp.clusters.bed
    rm $workdir/${outprefix}.sort.clusters.bed
    rm $workdir/${outprefix}.clusters.bed
else
    echo "Cluster file is already merged and sorted"
fi

echo "Completed sorting/merging" | tee -a $paramlog 
MYSEC=$(date +%s)
DIFFSEC=`expr ${MYSEC} - ${STARTSEC}`
echo Time-elapsed `date +%H:%M:%S -ud @${DIFFSEC}` | tee -a $paramlog 

##################################################################################################333
echo ""
echo "" | tee -a $paramlog 
echo "# Step5 : Merging breakpoints and generating report..." | tee -a $paramlog 
if ! [[ -e $workdir/${outprefix}.ClustObj.ph ]]; then 
    perl src/finalize_breaks.pl -in $workdir/${outprefix}.sort.merge.clust.bed.gz -wd $workdir -outprefix $outprefix -algnscore $clip
    if [[ $? != 0  ]]; then
      echo "Error in parsing step " | tee -a $paramlog 
      exit 1
    fi
else
  echo "finalized breakpoint object is already present"
fi

if ! [[ -e $workdir/${outprefix}.ClustObj_supportRAMcount.ph ]]; then
    bedtools random -l 1 -n 100000 -g $chrsize > $workdir/${outprefix}_RandomLocs.bed 
    perl src/annotate_breaks.pl -in $workdir/${outprefix}.ClustObj.ph -ram $workdir/${outprefix}.RAM.sort.bam -index $index -rand $workdir/${outprefix}_RandomLocs.bed -ncores $ncores -outprefix $outprefix -wd $workdir
    if [[ $? != 0  ]]; then
      echo "Error in parsing step " | tee -a $paramlog 
      exit 1
    fi
else
  echo "annotated breakpoint object is already present"
fi

if ! [[ -e $workdir/${outprefix}.ClustObj_PutativeInsertions.ph ]]; then 
    perl src/putative_insertions.pl -in $workdir/${outprefix}.ClustObj_supportRAMcount.ph -polym $indexP -index $index -repbase $repbase -q $anchor_mapq -bgAnnotations $bgAnnotations -enzyme $enzyme -ncores $ncores -outprefix $outprefix -wd $workdir
    if [[ $? != 0  ]]; then
      echo "Error in parsing step " | tee -a $paramlog 
      exit 1
    fi
else
  echo "putative insertion object is already present"
fi

if ! [[ -e $workdir/${outprefix}.candidate.insertions.bed ]]; then 
    perl src/write_insertions.pl -in $workdir/${outprefix}.ClustObj_PutativeInsertions.ph -outprefix $outprefix -q $anchor_mapq  -e $enzyme -wd $workdir -index $index -polym $indexP
    if [[ $? != 0  ]]; then
      echo "Error in parsing step " | tee -a $paramlog 
      exit 1
    fi
else
  echo "Candidate insertion report is already generated"
fi

MYSEC=$(date +%s)
DIFFSEC=`expr ${MYSEC} - ${STARTSEC}`
echo "Completed generating report" | tee -a $paramlog 
echo Time-elapsed `date +%H:%M:%S -ud @${DIFFSEC}` 


##################################################################################################333
echo ""
echo "" | tee -a $paramlog 
echo "# Step6 (optional): Generating HTML report..." | tee -a $paramlog 
echo ""
Rscript src/createReport.R $outprefix $workdir
if [[ $? != 0  ]]; then
   echo "  {Could not generate HTML report page. One or more R-packages are missing!}"  | tee -a $paramlog 
fi
echo "##------------------------Completed------------------------------------"  | tee -a $paramlog 
echo ""  | tee -a $paramlog 
echo ""  | tee -a $paramlog 

##################################################################################################
